<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Lead Bank Portal</title>
  <link rel="icon" type="image/png" href="https://pplx-res.cloudinary.com/image/upload/v1750699342/user_uploads/37910960/f23c5efd-fc81-4890-956b-99c356908434/images-4-1.jpg">
  <style>
    :root {
      --primary: #003366;
      --accent: #1e40af;
      --success: #059669;
      --danger: #b91c1c;
      --warning: #f59e42;
      --background: #f4f7fa;
      --card: #fff;
      --glass: rgba(30,64,175,0.09);
      --border: #dbeafe;
    }
    body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: var(--background); margin: 0;}
    header {
      background: #fff;
      padding: 16px 32px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.07);
      display: flex; align-items: center; gap: 16px;
    }
    .logo-container img { height: 48px; background: transparent; }
    main {
      max-width: 1200px;
      margin: 32px auto;
      background: var(--card);
      border-radius: 10px;
      box-shadow: 0 4px 32px #0001;
      padding: 32px;
    }
    h2 { color: var(--primary); }
    .hidden { display: none !important; }
    .service-footer {
      margin-top: 38px;
      color: var(--primary);
      font-size: 1.05em;
      text-align: center;
      opacity: 0.85;
      font-weight: 600;
      letter-spacing: 0.02em;
    }
    .login-container {
      background: var(--card);
      padding: 36px 28px 28px 28px;
      border-radius: 18px;
      box-shadow: 0 8px 32px rgba(0,0,0,0.10);
      display: flex;
      flex-direction: column;
      align-items: center;
      width: 100%;
      max-width: 370px;
      margin: 40px auto 0 auto;
    }
    .login-logo {
      width: 180px;
      margin-bottom: 18px;
    }
    label {
      display: block;
      font-weight: 600;
      margin-bottom: 5px;
      color: var(--primary);
    }
    input[type="text"], input[type="password"], input[type="number"], input[type="email"], select, textarea {
      width: 100%;
      padding: 10px 12px;
      margin-bottom: 18px;
      border: 1.5px solid var(--border);
      border-radius: 6px;
      font-size: 1rem;
      background: #f8fafc;
      transition: border 0.2s;
    }
    input:focus, select:focus, textarea:focus {
      border: 1.5px solid var(--primary);
      outline: none;
    }
    button {
      padding: 12px 24px;
      background: var(--primary);
      color: #fff;
      border: none;
      border-radius: 7px;
      font-size: 1.1rem;
      font-weight: 700;
      cursor: pointer;
      margin-top: 8px;
      transition: background 0.2s;
    }
    button:hover {
      background: var(--accent);
    }
    .btn-danger { background: var(--danger); }
    .btn-danger:hover { background: #7f1d1d; }
    .btn-outline {
      background: #fff;
      color: var(--primary);
      border: 1.5px solid var(--primary);
    }
    .btn-outline:hover { background: var(--primary); color: #fff; }
    .btn-group { display: flex; gap: 10px; }
    .glass-card {
      background: var(--glass);
      border-radius: 18px;
      box-shadow: 0 8px 32px rgba(0,0,0,0.12);
      backdrop-filter: blur(7px);
      -webkit-backdrop-filter: blur(7px);
      border: 1.5px solid var(--border);
      padding: 24px;
      margin: 26px 0 30px 0;
      color: var(--primary);
      position: relative;
      overflow: hidden;
    }
    .glass-card-content { position: relative; z-index: 1; }
    .thumbnail-photo {
      width: 80px; height: 80px; object-fit: cover; border-radius: 8px; border: 1px solid #ccc; background: #f8fafc;
    }
    .admin-photo {
      width: 40px; height: 40px; object-fit: cover; border-radius: 4px; border: 1px solid #ccc; background: #f8fafc;
    }
    table { width: 100%; border-collapse: collapse; margin-top: 18px; }
    th, td { padding: 10px; border-bottom: 1px solid #eee; text-align: left; }
    th { background: #f0f4fa; }
    .no-photo { color: #aaa; font-style: italic; }
    .status-active { color: var(--success); font-weight: bold; }
    .status-inactive { color: var(--danger); font-weight: bold; }
    .status-hold { color: var(--warning); font-weight: bold; }
    .loading-spinner {
      display: flex; align-items: center; justify-content: center; margin: 20px 0;
    }
    .loading-spinner svg { width: 40px; height: 40px; }
    /* Modal styles for receipts and customer edit */
    .modal-bg {
      display: none; position: fixed; left: 0; top: 0; width: 100vw; height: 100vh; z-index: 300;
      background: #0007; align-items: center; justify-content: center;
    }
    .modal-bg.active { display: flex; }
    .modal-content {
      background: #fff; padding: 32px; border-radius: 12px; min-width: 320px; max-width: 98vw;
      box-shadow: 0 8px 32px #0003; position: relative;
      overflow-y: auto; max-height: 90vh;
    }
    .modal-close { position: absolute; top: 8px; right: 8px; font-size: 1.5em; background: none; border: none; color: var(--primary); cursor: pointer; }
    .receipt-logo-watermark {
      position: absolute;
      left: 50%; top: 50%;
      transform: translate(-50%, -50%);
      opacity: 0.08;
      width: 80%;
      z-index: 0;
      pointer-events: none;
      filter: grayscale(1);
    }
    .receipt-content {
      position: relative; z-index: 1;
    }
    .receipt-title {
      font-size: 2em;
      font-weight: bold;
      letter-spacing: 0.1em;
      color: var(--primary);
      opacity: 0.16;
      text-align: center;
      margin-bottom: 12px;
      margin-top: 12px;
      user-select: none;
    }
    .receipt-note {
      font-size: 0.96em; color: #555; margin-top: 12px; opacity: 0.7;
    }
    /* Notification bell and box */
    .notification-bell {
      display: inline-block; position: relative; margin-left: 12px; cursor: pointer;
      vertical-align: middle;
    }
    .notification-bell svg { width: 26px; height: 26px; }
    .notification-dot {
      position: absolute; top: 2px; right: 2px; width: 12px; height: 12px;
      background: var(--danger); border-radius: 50%; border: 2px solid #fff;
      display: none;
    }
    .notification-dot.active { display: block; }
    .notification-box {
      position: absolute; right: 0; top: 38px; width: 320px; max-width: 95vw;
      background: #fff; border: 1px solid #ddd; border-radius: 8px;
      box-shadow: 0 4px 16px #0002; z-index: 100; display: none; padding: 0;
    }
    .notification-box.active { display: block; }
    .notification-box h4 { margin: 0; padding: 12px; background: #f0f4fa; border-bottom: 1px solid #eee; }
    .notification-list { max-height: 300px; overflow-y: auto; }
    .notification-item { padding: 12px; border-bottom: 1px solid #eee; font-size: 0.98rem; }
    .notification-item:last-child { border-bottom: none; }
    .notification-item .date { color: #888; font-size: 0.88em; }
    .notification-close {
      position: absolute; right: 10px; top: 10px; background: #eee; border: none; border-radius: 50%; width: 28px; height: 28px; font-size: 1.2em; color: var(--primary); cursor: pointer;
    }
    /* Transfer modal */
    .transfer-modal {
      position: fixed; left: 0; top: 0; width: 100vw; height: 100vh; background: #0007;
      display: none; align-items: center; justify-content: center; z-index: 300;
    }
    .transfer-modal.active { display: flex; }
    .transfer-box {
      background: #fff; padding: 32px; border-radius: 12px; min-width: 320px; max-width: 98vw;
      box-shadow: 0 8px 32px #0003; position: relative;
    }
    .transfer-box button.close { position: absolute; top: 8px; right: 8px; font-size: 0.9em; padding: 4px 10px;}
    .transfer-success {
      text-align: center; color: var(--success); font-size: 1.2em; margin-top: 16px;
    }
    .transfer-success svg { width: 36px; height: 36px; vertical-align: middle; }
    /* Loan section */
    .loan-section {
      background: var(--glass);
      border-radius: 12px;
      padding: 20px;
      margin: 24px 0;
      box-shadow: 0 2px 8px #0001;
    }
    .loan-status-approved { color: var(--success); font-weight: bold; }
    .loan-status-pending { color: var(--warning); font-weight: bold; }
    .loan-status-declined { color: var(--danger); font-weight: bold; }
    @media (max-width: 700px) {
      main { padding: 12px; }
      .glass-card { padding: 12px; }
      .login-container { padding: 18px 6vw 18px 6vw; }
      .login-logo { width: 100px; }
      .service-footer { font-size: 0.98em; }
      .notification-box { right: 0; left: 0; margin: auto; }
      .transfer-box { padding: 10px; min-width: 0; }
      .modal-content { padding: 10px; min-width: 0; }
      .loan-section { padding: 8px; }
    }
  </style>
</head>
<body>
  <header>
    <div class="logo-container">
      <img src="https://pplx-res.cloudinary.com/image/upload/v1750699342/user_uploads/37910960/f23c5efd-fc81-4890-956b-99c356908434/images-4-1.jpg" alt="Lead Bank Logo" />
    </div>
  </header>
  <main>
    <!-- Login Page -->
    <div class="login-container" id="loginContainer">
      <img src="https://pplx-res.cloudinary.com/image/upload/v1750699342/user_uploads/37910960/f23c5efd-fc81-4890-956b-99c356908434/images-4-1.jpg" class="login-logo" alt="Lead Bank Logo" />
      <h2>Sign In</h2>
      <form id="loginForm" autocomplete="off">
        <label for="loginUsername">Username</label>
        <input type="text" id="loginUsername" name="loginUsername" required>
        <label for="loginPassword">Password</label>
        <input type="password" id="loginPassword" name="loginPassword" required>
        <button type="submit">Login</button>
      </form>
    </div>
    <!-- <!-- Customer Dashboard (hidden until login) -->
<section class="dashboard-section hidden" id="customerDashboardSection">
  <div style="display:flex;align-items:center;justify-content:space-between;">
    <h2 style="margin-bottom:0;">Customer Dashboard</h2>
    <span class="notification-bell" onclick="toggleNotifications()" style="position:relative;">
      <svg viewBox="0 0 24 24" fill="none"><path d="M12 2C8.13 2 5 5.13 5 9v5c0 .55-.45 1-1 1s-1 .45-1 1v1h18v-1c0-.55-.45-1-1-1s-1-.45-1-1V9c0-3.87-3.13-7-7-7zM12 22c1.1 0 2-.9 2-2h-4c0 1.1.9 2 2 2z" fill="#003366"/></svg>
      <span class="notification-dot" id="notificationDot"></span>
    </span>
    <div class="notification-box" id="notificationBox">
      <button class="notification-close" onclick="closeNotificationBox(event)">&times;</button>
      <h4>Notifications</h4>
      <div class="notification-list" id="notificationList"></div>
    </div>
  </div>
  <div class="glass-card">
    <div class="glass-card-content">
      <img id="dashboardPhoto" class="thumbnail-photo" src="" alt="Customer Photo" style="float:right;margin-left:16px;">
      <strong>Name:</strong> <span id="dashboardName"></span><br>
      <strong>Email/Phone:</strong> <span id="dashboardEmail"></span><br>
      <strong>Home Address:</strong> <span id="dashboardAddress"></span><br>
      <strong>Account Number:</strong> <span id="dashboardAccountNo"></span><br>
      <strong>Account Type:</strong> <span id="dashboardType"></span><br>
      <strong>Routing Number:</strong> <span id="dashboardRouting"></span><br>
      <strong>Balance:</strong> $<span id="dashboardBalance"></span><br>
      <strong>Status:</strong> <span id="dashboardStatus"></span>
    </div>
  </div>
  <button style="margin:18px 0 0 0;" onclick="openTransferModal()">Make Transfer</button>
  <div>
    <h3>Transaction History</h3>
    <table>
      <thead>
        <tr>
          <th>Date</th>
          <th>Type</th>
          <th>Amount</th>
          <th>Status</th>
          <th>Reference</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody id="dashboardTransactions">
        <tr><td colspan="6" class="no-photo">No transactions yet.</td></tr>
      </tbody>
    </table>
  </div>
  <div class="loan-section" id="loanSection">
    <h3>Loan Services</h3>
    <form id="loanForm">
      <label for="loanAmount">Loan Amount:</label>
      <input type="number" id="loanAmount" min="100" step="1" required>
      <label for="loanPurpose">Purpose:</label>
      <input type="text" id="loanPurpose" required>
      <label for="loanDuration">Repayment Duration (months):</label>
      <input type="number" id="loanDuration" min="1" max="60" required>
      <button type="submit">Apply for Loan</button>
    </form>
    <div id="loanStatusBox"></div>
  </div>
  <div class="service-footer">
    Customer Service: leadbnkservices@protonmail.com
  </div>
  <button style="margin-top:20px;" onclick="logout()">Logout</button>
</section>

<!-- Admin Dashboard (hidden until login) -->
<section class="form-section hidden" id="adminPanel">
  <div style="display:flex;align-items:center;justify-content:space-between;">
    <h2 style="margin-bottom:0;">Admin Panel</h2>
    <span class="notification-bell" onclick="toggleAdminNotifications()" style="position:relative;">
      <svg viewBox="0 0 24 24" fill="none"><path d="M12 2C8.13 2 5 5.13 5 9v5c0 .55-.45 1-1 1s-1 .45-1 1v1h18v-1c0-.55-.45-1-1-1s-1-.45-1-1V9c0-3.87-3.13-7-7-7zM12 22c1.1 0 2-.9 2-2h-4c0 1.1.9 2 2 2z" fill="#003366"/></svg>
      <span class="notification-dot" id="adminNotificationDot"></span>
    </span>
    <div class="notification-box" id="adminNotificationBox" style="right:0;left:auto;">
      <button class="notification-close" onclick="closeAdminNotificationBox(event)">&times;</button>
      <h4>All Customer Activities</h4>
      <div class="notification-list" id="adminNotificationList"></div>
    </div>
  </div>
  <form id="createCustomerForm" autocomplete="off">
    <label for="customerName">Full Name:</label>
    <input type="text" id="customerName" required>
    <label for="customerEmail">Email or Phone:</label>
    <input type="text" id="customerEmail" required>
    <label for="customerAddress">Home Address:</label>
    <input type="text" id="customerAddress" required>
    <label for="customerType">Account Type:</label>
    <select id="customerType" required>
      <option value="Savings">Savings</option>
      <option value="Checking">Checking</option>
      <option value="Business">Business</option>
    </select>
    <label for="customerAccountNo">Account Number (unique):</label>
    <input type="text" id="customerAccountNo" pattern="^[0-9]{10,}$" placeholder="e.g. 10XXXXXXXX" required>
    <label for="customerUsername">Username:</label>
    <input type="text" id="customerUsername" required>
    <label for="customerPassword">Password:</label>
    <input type="password" id="customerPassword" required>
    <label for="customerPhoto">Customer Photo:</label>
    <input type="file" id="customerPhoto" accept="image/*">
    <img id="photoPreview" src="https://pplx-res.cloudinary.com/image/upload/v1750699342/user_uploads/37910960/f23c5efd-fc81-4890-956b-99c356908434/images-4-1.jpg" alt="Photo Preview" class="thumbnail-photo" style="margin-top:10px;"><br>
    <button type="submit">Create Customer Account</button>
  </form>
  <h3 style="margin-top:40px;">All Customers</h3>
  <div id="adminLoading" class="loading-spinner" style="display:none;">
    <svg viewBox="0 0 50 50"><circle cx="25" cy="25" r="20" fill="none" stroke="#003366" stroke-width="5" stroke-linecap="round" stroke-dasharray="31.4 31.4" transform="rotate(-90 25 25)"><animateTransform attributeName="transform" type="rotate" from="0 25 25" to="360 25 25" dur="1s" repeatCount="indefinite"/></circle></svg>
  </div>
  <table>
    <thead>
      <tr>
        <th>Photo</th>
        <th>Name</th>
        <th>Account No.</th>
        <th>Type</th>
        <th>Status</th>
        <th>Balance</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody id="adminCustomersTable"></tbody>
  </table>
  <button style="margin-top:20px;" onclick="logout()">Logout</button>
</section>

<!-- Modal for receipts, notifications, editing, credit, and loan -->
<div class="modal-bg" id="modalBg">
  <div class="modal-content" id="modalContent"></div>
</div>

<!-- Transfer Modal -->
<div class="transfer-modal" id="transferModal">
  <div class="transfer-box" id="transferBox">
    <button class="close btn-outline" onclick="closeTransferModal()">&times;</button>
    <form id="transferForm" autocomplete="off">
      <h3>Official Bank Transfer</h3>
      <label for="recipientName">Recipient Name:</label>
      <input type="text" id="recipientName" required>
      <label for="recipientBank">Bank Name:</label>
      <input type="text" id="recipientBank" required>
      <label for="recipientAccountNo">Account Number:</label>
      <input type="text" id="recipientAccountNo" required>
      <label for="recipientRouting">Routing/IBAN Number:</label>
      <input type="text" id="recipientRouting" required>
      <label for="transferAmount">Amount:</label>
      <input type="number" id="transferAmount" min="1" step="0.01" required>
      <label for="transferReference">Reference:</label>
      <input type="text" id="transferReference" placeholder="e.g. Payment for invoice" required>
      <div class="btn-group">
        <button type="submit" id="transferSendBtn">Send</button>
        <button type="button" class="btn-outline" onclick="closeTransferModal()">Cancel</button>
      </div>
      <div id="transferLoading" style="display:none;text-align:center;margin-top:12px;">
        <span>Sending...</span><br>
        <svg width="36" height="36" viewBox="0 0 50 50"><circle cx="25" cy="25" r="20" fill="none" stroke="#003366" stroke-width="5" stroke-linecap="round" stroke-dasharray="31.4 31.4" transform="rotate(-90 25 25)"><animateTransform attributeName="transform" type="rotate" from="0 25 25" to="360 25 25" dur="1s" repeatCount="indefinite"/></circle></svg>
      </div>
      <div id="transferSuccess" class="transfer-success" style="display:none;">
        <svg fill="#080" viewBox="0 0 24 24"><path d="M9 16.2l-3.5-3.6-1.4 1.4 4.9 5 10-10-1.4-1.4z"/></svg>
        Sent!
      </div>
    </form>
  </div>
</div>

<script>
// --- Data helpers ---
function getCustomers() { return JSON.parse(localStorage.getItem('customers') || '[]'); }
function saveCustomers(customers) { localStorage.setItem('customers', JSON.stringify(customers)); }
function getNotifications(username) { return JSON.parse(localStorage.getItem('notif_' + username) || '[]'); }
function saveNotifications(username, notifs) { localStorage.setItem('notif_' + username, JSON.stringify(notifs)); }
function setNotifSeen(username) { localStorage.setItem('notif_seen_' + username, '1'); }
function getNotifSeen(username) { return localStorage.getItem('notif_seen_' + username) === '1'; }
function setNotifUnseen(username) { localStorage.setItem('notif_seen_' + username, '0'); }
function getAdminNotifications() { return JSON.parse(localStorage.getItem('admin_notifs') || '[]'); }
function saveAdminNotifications(notifs) { localStorage.setItem('admin_notifs', JSON.stringify(notifs)); }
function setAdminNotifSeen() { localStorage.setItem('admin_notif_seen', '1'); }
function getAdminNotifSeen() { return localStorage.getItem('admin_notif_seen') === '1'; }
function setAdminNotifUnseen() { localStorage.setItem('admin_notif_seen', '0'); }

// --- Photo preview ---
document.getElementById('customerPhoto').addEventListener('change', function(e) {
  const file = e.target.files[0];
  const img = document.getElementById('photoPreview');
  if (file) {
    const reader = new FileReader();
    reader.onload = evt => img.src = evt.target.result;
    reader.readAsDataURL(file);
  } else {
    img.src = "https://pplx-res.cloudinary.com/image/upload/v1750699342/user_uploads/37910960/f23c5efd-fc81-4890-956b-99c356908434/images-4-1.jpg";
  }
});

// --- Account number uniqueness check ---
function isAccountNoUnique(accountNo) {
  let customers = getCustomers();
  return !customers.some(c => c.accountNo === accountNo);
}

// --- Admin creates customer ---
document.getElementById('createCustomerForm').addEventListener('submit', function(e) {
  e.preventDefault();
  const name = document.getElementById('customerName').value.trim();
  const email = document.getElementById('customerEmail').value.trim();
  const address = document.getElementById('customerAddress').value.trim();
  const type = document.getElementById('customerType').value;
  const accountNo = document.getElementById('customerAccountNo').value.trim();
  const username = document.getElementById('customerUsername').value.trim();
  const password = document.getElementById('customerPassword').value;
  const photoInput = document.getElementById('customerPhoto');
  let photoUrl = document.getElementById('photoPreview').src;
  if (!photoInput.files[0]) {
    photoUrl = "https://pplx-res.cloudinary.com/image/upload/v1750699342/user_uploads/37910960/f23c5efd-fc81-4890-956b-99c356908434/images-4-1.jpg";
  }
  let customers = getCustomers();
  if (customers.some(c => c.username === username)) {
    alert('Username already exists!');
    return;
  }
  if (!isAccountNoUnique(accountNo)) {
    alert('Account number already exists!');
    return;
  }
  customers.push({
    name, email, address, type, username, password, photoUrl,
    accountNo, routingNo: '101019644', balance: 0, status: 'Active',
    transactions: [], loans: []
  });
  saveCustomers(customers);
  renderAdminTable();
  document.getElementById('createCustomerForm').reset();
  document.getElementById('photoPreview').src = "https://pplx-res.cloudinary.com/image/upload/v1750699342/user_uploads/37910960/f23c5efd-fc81-4890-956b-99c356908434/images-4-1.jpg";
});

// --- Admin Table ---
function renderAdminTable() {
  const tbody = document.getElementById('adminCustomersTable');
  let customers = getCustomers();
  tbody.innerHTML = '';
  if (customers.length === 0) {
    tbody.innerHTML = '<tr><td colspan="7" class="no-photo">No customers yet.</td></tr>';
    return;
  }
  customers.forEach((cust, idx) => {
    let balance = typeof cust.balance === "number" ? cust.balance : 0;
    const tr = document.createElement('tr');
    tr.innerHTML = `
      <td><img src="${cust.photoUrl}" class="admin-photo" alt="Photo"></td>
      <td>${cust.name}</td>
      <td>${cust.accountNo}</td>
      <td>${cust.type}</td>
      <td>
        <span class="${cust.status === 'Active' ? 'status-active' : 'status-inactive'}">${cust.status}</span>
      </td>
      <td>$${balance.toFixed(2)}</td>
      <td>
        <button onclick="openCustomerDetails(${idx})">View/Edit</button>
        <button onclick="openCreditModal(${idx})" style="background:#059669;margin-left:5px;">Credit</button>
        <button onclick="deleteCustomer(${idx})" style="background:#a00;margin-left:5px;">Delete</button>
      </td>
    `;
    tbody.appendChild(tr);
  });
}

// --- Admin View/Edit Modal ---
function openCustomerDetails(idx) {
  let customers = getCustomers();
  let c = customers[idx];
  let html = `
    <div>
      <button class="modal-close" onclick="closeModal()">&times;</button>
      <h3>Customer Profile</h3>
      <img src="${c.photoUrl}" class="thumbnail-photo" style="float:right;margin-left:12px;">
      <form id="editCustomerForm">
        <label>Name:<input type="text" id="editName" value="${c.name}" required></label>
        <label>Email/Phone:<input type="text" id="editEmail" value="${c.email}" required></label>
        <label>Home Address:<input type="text" id="editAddress" value="${c.address}" required></label>
        <label>Account Type:
          <select id="editType">
            <option value="Savings" ${c.type === 'Savings' ? 'selected' : ''}>Savings</option>
            <option value="Checking" ${c.type === 'Checking' ? 'selected' : ''}>Checking</option>
            <option value="Business" ${c.type === 'Business' ? 'selected' : ''}>Business</option>
          </select>
        </label>
        <label>Account Number:<input type="text" id="editAccountNo" value="${c.accountNo}" required></label>
        <label>Routing Number:<input type="text" id="editRoutingNo" value="${c.routingNo}" required></label>
        <label>Balance:<input type="number" id="editBalance" value="${c.balance}" required></label>
        <label>Status:
          <select id="editStatus">
            <option value="Active" ${c.status === 'Active' ? 'selected' : ''}>Active</option>
            <option value="Inactive" ${c.status === 'Inactive' ? 'selected' : ''}>Inactive</option>
          </select>
        </label>
        <button type="submit">Save Changes</button>
      </form>
      <h4>Send Notification</h4>
      <form id="sendNotifForm">
        <textarea id="notifMsg" placeholder="Type message..." required></textarea>
        <button type="submit">Send Notification</button>
      </form>
      <h4>Edit Transaction History</h4>
      <table>
        <thead>
          <tr>
            <th>Date</th><th>Type</th><th>Amount</th><th>Status</th><th>Reference</th><th>Actions</th>
          </tr>
        </thead>
        <tbody>
          ${(c.transactions||[]).map((t,txidx)=>`
            <tr>
              <td><input type="text" value="${t.date}" onchange="editTxField(${idx},${txidx},'date',this.value)"></td>
              <td><input type="text" value="${t.type}" onchange="editTxField(${idx},${txidx},'type',this.value)"></td>
              <td><input type="number" value="${t.amount}" onchange="editTxField(${idx},${txidx},'amount',parseFloat(this.value))"></td>
              <td><input type="text" value="${t.status}" onchange="editTxField(${idx},${txidx},'status',this.value)"></td>
              <td><input type="text" value="${t.reference}" onchange="editTxField(${idx},${txidx},'reference',this.value)"></td>
              <td><button onclick="deleteTx(${idx},${txidx})" style="background:#a00;">Delete</button></td>
            </tr>
          `).join('')}
        </tbody>
      </table>
      <h4>Loan Requests</h4>
      <table>
        <thead>
          <tr>
            <th>Amount</th><th>Purpose</th><th>Duration</th><th>Status</th><th>Actions</th>
          </tr>
        </thead>
        <tbody>
          ${(c.loans||[]).map((l,loanidx)=>`
            <tr>
              <td>$${l.amount}</td>
              <td>${l.purpose}</td>
              <td>${l.duration} mo</td>
              <td><span class="loan-status-${l.status.toLowerCase()}">${l.status}</span></td>
              <td>
                ${l.status==='Pending'?`
                  <button onclick="approveLoan(${idx},${loanidx})" style="background:#059669;">Approve</button>
                  <button onclick="declineLoan(${idx},${loanidx})" style="background:#a00;">Decline</button>
                `:l.status==='Approved'?`
                  <button onclick="markLoanRepaid(${idx},${loanidx})" style="background:#1e40af;">Mark Repaid</button>
                `:''}
              </td>
            </tr>
          `).join('')}
        </tbody>
      </table>
    </div>
  `;
  document.getElementById('modalContent').innerHTML = html;
  document.getElementById('modalBg').classList.add('active');
  document.getElementById('editCustomerForm').onsubmit = function(ev) {
    ev.preventDefault();
    c.name = document.getElementById('editName').value;
    c.email = document.getElementById('editEmail').value;
    c.address = document.getElementById('editAddress').value;
    c.type = document.getElementById('editType').value;
    c.accountNo = document.getElementById('editAccountNo').value;
    c.routingNo = document.getElementById('editRoutingNo').value;
    c.balance = parseFloat(document.getElementById('editBalance').value);
    c.status = document.getElementById('editStatus').value;
    customers[idx] = c;
    saveCustomers(customers);
    renderAdminTable();
    closeModal();
  };
  document.getElementById('sendNotifForm').onsubmit = function(ev) {
    ev.preventDefault();
    let msg = document.getElementById('notifMsg').value;
    addNotification(c.username, msg, 'Admin');
    alert('Notification sent!');
    document.getElementById('notifMsg').value = '';
  };
}
window.openCustomerDetails = openCustomerDetails;
function deleteCustomer(idx) {
  if (!confirm("Are you sure you want to delete this customer account?")) return;
  let customers = getCustomers();
  let username = customers[idx].username;
  customers.splice(idx, 1);
  saveCustomers(customers);
  localStorage.removeItem('notif_' + username);
  localStorage.removeItem('notif_seen_' + username);
  renderAdminTable();
}
window.deleteCustomer = deleteCustomer;
function closeModal() {
  document.getElementById('modalBg').classList.remove('active');
}
window.closeModal = closeModal;
function editTxField(idx, txidx, key, val) {
  let customers = getCustomers();
  customers[idx].transactions[txidx][key] = val;
  saveCustomers(customers);
  openCustomerDetails(idx);
}
window.editTxField = editTxField;
function deleteTx(idx, txidx) {
  let customers = getCustomers();
  customers[idx].transactions.splice(txidx, 1);
  saveCustomers(customers);
  openCustomerDetails(idx);
}
window.deleteTx = deleteTx;

// --- Credit Modal ---
function openCreditModal(idx) {
  let customers = getCustomers();
  let c = customers[idx];
  let html = `
    <div>
      <button class="modal-close" onclick="closeModal()">&times;</button>
      <h3>Credit Customer Account</h3>
      <form id="creditForm">
        <label>Sender Name:<input type="text" id="creditSender" required></label>
        <label>Reference:<input type="text" id="creditReference" required></label>
        <label>Amount:<input type="number" id="creditAmount" min="1" required></label>
        <button type="submit">Credit Account</button>
      </form>
    </div>
  `;
  document.getElementById('modalContent').innerHTML = html;
  document.getElementById('modalBg').classList.add('active');
  document.getElementById('creditForm').onsubmit = function(ev) {
    ev.preventDefault();
    let sender = document.getElementById('creditSender').value;
    let ref = document.getElementById('creditReference').value;
    let amount = parseFloat(document.getElementById('creditAmount').value);
    c.balance += amount;
    let date = new Date().toLocaleString();
    c.transactions.push({
      date, type: 'Credit', amount, status: 'Success', reference: ref, note: `Credited by ${sender}`
    });
    saveCustomers(customers);
    addNotification(c.username, `Your account was credited with $${amount.toFixed(2)} by ${sender}. Ref: ${ref}`, 'Admin');
    addAdminNotification(`Credited $${amount.toFixed(2)} to ${c.name} (${c.accountNo}) by ${sender}. Ref: ${ref}`);
    renderAdminTable();
    closeModal();
  };
}
window.openCreditModal = openCreditModal;

// --- Loan Actions ---
function approveLoan(idx, loanidx) {
  let customers = getCustomers();
  let c = customers[idx];
  c.loans[loanidx].status = 'Approved';
  saveCustomers(customers);
  addNotification(c.username, `Your loan of $${c.loans[loanidx].amount} has been approved.`, 'Admin');
  addAdminNotification(`Loan approved for ${c.name} ($${c.loans[loanidx].amount}).`);
  openCustomerDetails(idx);
}
window.approveLoan = approveLoan;
function declineLoan(idx, loanidx) {
  let customers = getCustomers();
  let c = customers[idx];
  c.loans[loanidx].status = 'Declined';
  saveCustomers(customers);
  addNotification(c.username, `Your loan of $${c.loans[loanidx].amount} was declined.`, 'Admin');
  addAdminNotification(`Loan declined for ${c.name} ($${c.loans[loanidx].amount}).`);
  openCustomerDetails(idx);
}
window.declineLoan = declineLoan;
function markLoanRepaid(idx, loanidx) {
  let customers = getCustomers();
  let c = customers[idx];
  c.loans[loanidx].status = 'Repaid';
  saveCustomers(customers);
  addNotification(c.username, `Your loan of $${c.loans[loanidx].amount} is marked as repaid.`, 'Admin');
  addAdminNotification(`Loan marked as repaid for ${c.name} ($${c.loans[loanidx].amount}).`);
  openCustomerDetails(idx);
}
window.markLoanRepaid = markLoanRepaid;

// --- Notifications ---
function addNotification(username, message, sender) {
  let notifs = getNotifications(username);
  notifs.unshift({ message, date: new Date().toLocaleString(), sender: sender || 'System' });
  saveNotifications(username, notifs);
  setNotifUnseen(username);
}
function addAdminNotification(message) {
  let notifs = getAdminNotifications();
  notifs.unshift({ message, date: new Date().toLocaleString() });
  saveAdminNotifications(notifs);
  setAdminNotifUnseen();
}
function toggleNotifications() {
  let notifBox = document.getElementById('notificationBox');
  notifBox.classList.toggle('active');
  if (notifBox.classList.contains('active')) {
    setNotifSeen(currentUser.username);
    renderNotifications();
    updateNotifDot();
  }
}
function closeNotificationBox(event) {
  event.stopPropagation();
  document.getElementById('notificationBox').classList.remove('active');
  setNotifSeen(currentUser.username);
  updateNotifDot();
}
function renderNotifications() {
  let list = document.getElementById('notificationList');
  let notifs = getNotifications(currentUser.username);
  if (!notifs.length) {
    list.innerHTML = '<div class="notification-item">No notifications yet.</div>';
    return;
  }
  list.innerHTML = notifs.map(n => `<div class="notification-item"><div>${n.message}</div><div class="date">${n.date}</div></div>`).join('');
}
function updateNotifDot() {
  let dot = document.getElementById('notificationDot');
  if (!getNotifSeen(currentUser.username) && getNotifications(currentUser.username).length) {
    dot.classList.add('active');
  } else {
    dot.classList.remove('active');
  }
}
function toggleAdminNotifications() {
  let notifBox = document.getElementById('adminNotificationBox');
  notifBox.classList.toggle('active');
  if (notifBox.classList.contains('active')) {
    setAdminNotifSeen();
    renderAdminNotifications();
    updateAdminNotifDot();
  }
}
function closeAdminNotificationBox(event) {
  event.stopPropagation();
  document.getElementById('adminNotificationBox').classList.remove('active');
  setAdminNotifSeen();
  updateAdminNotifDot();
}
function renderAdminNotifications() {
  let list = document.getElementById('adminNotificationList');
  let notifs = getAdminNotifications();
  if (!notifs.length) {
    list.innerHTML = '<div class="notification-item">No activities yet.</div>';
    return;
  }
  list.innerHTML = notifs.map(n => `<div class="notification-item"><div>${n.message}</div><div class="date">${n.date}</div></div>`).join('');
}
function updateAdminNotifDot() {
  let dot = document.getElementById('adminNotificationDot');
  if (!getAdminNotifSeen() && getAdminNotifications().length) {
    dot.classList.add('active');
  } else {
    dot.classList.remove('active');
  }
}

// --- Customer dashboard logic ---
let currentUser = null;
document.getElementById('loginForm').addEventListener('submit', function(e) {
  e.preventDefault();
  const username = document.getElementById('loginUsername').value.trim();
  const password = document.getElementById('loginPassword').value;
  document.getElementById('loginForm').querySelector('button').disabled = true;
  setTimeout(() => {
    document.getElementById('loginForm').querySelector('button').disabled = false;
    if (username === 'admin' && password === 'admin') {
      currentUser = {type: 'admin', name: 'Admin', username: 'admin'};
      document.getElementById('loginContainer').classList.add('hidden');
      document.getElementById('adminPanel').classList.remove('hidden');
      renderAdminTable();
      renderAdminNotifications();
      updateAdminNotifDot();
    } else {
      let customers = getCustomers();
      const cust = customers.find(c => c.username === username && c.password === password);
      if (cust) {
        currentUser = cust;
        document.getElementById('loginContainer').classList.add('hidden');
        document.getElementById('customerDashboardSection').classList.remove('hidden');
        document.getElementById('dashboardPhoto').src = cust.photoUrl;
        document.getElementById('dashboardName').textContent = cust.name;
        document.getElementById('dashboardEmail').textContent = cust.email;
        document.getElementById('dashboardAddress').textContent = cust.address;
        document.getElementById('dashboardAccountNo').textContent = cust.accountNo;
        document.getElementById('dashboardType').textContent = cust.type;
        document.getElementById('dashboardRouting').textContent = cust.routingNo;
        document.getElementById('dashboardBalance').textContent = (typeof cust.balance === "number" ? cust.balance : 0).toFixed(2);
        document.getElementById('dashboardStatus').textContent = cust.status;
        renderDashboardTransactions();
        renderNotifications();
        updateNotifDot();
        renderLoanStatus();
      } else {
        alert('Invalid login!');
      }
    }
  }, 1200);
});
function logout() {
  document.getElementById('loginContainer').classList.remove('hidden');
  document.getElementById('adminPanel').classList.add('hidden');
  document.getElementById('customerDashboardSection').classList.add('hidden');
  currentUser = null;
}
function renderDashboardTransactions() {
  let tbody = document.getElementById('dashboardTransactions');
  let txs = currentUser.transactions || [];
  tbody.innerHTML = '';
  if (!txs.length) {
    tbody.innerHTML = '<tr><td colspan="6" class="no-photo">No transactions yet.</td></tr>';
    return;
  }
  txs.forEach(t => {
    tbody.innerHTML += `
      <tr>
        <td>${t.date}</td>
        <td>${t.type}</td>
        <td>$${typeof t.amount === "number" ? t.amount.toFixed(2) : t.amount}</td>
        <td class="transaction-status ${t.status.toLowerCase()}">${t.status}</td>
        <td>${t.reference}</td>
        <td>
          <button onclick="showReceipt('${t.reference}')">Receipt</button>
        </td>
      </tr>
    `;
  });
}
function showReceipt(ref) {
  let t = (currentUser.transactions || []).find(tx => tx.reference === ref);
  if (!t) return;
  let html = `
    <div class="receipt-title">RECEIPT</div>
    <div style="text-align:center;margin-bottom:10px;">
      <img class="receipt-logo" src="https://pplx-res.cloudinary.com/image/upload/v1750699342/user_uploads/37910960/f23c5efd-fc81-4890-956b-99c356908434/images-4-1.jpg" alt="Lead Bank Logo" style="height:32px;opacity:0.5;">
    </div>
    <div><b>Date:</b> ${t.date}</div>
    <div><b>Account Name:</b> ${currentUser.name}</div>
    <div><b>Account Number:</b> ${currentUser.accountNo}</div>
    <div><b>Account Type:</b> ${currentUser.type}</div>
    <div><b>Routing Number:</b> ${currentUser.routingNo}</div>
    <div><b>Transaction Type:</b> ${t.type}</div>
    <div><b>Amount:</b> $${typeof t.amount === "number" ? t.amount.toFixed(2) : t.amount}</div>
    <div><b>Status:</b> <span class="transaction-status ${t.status.toLowerCase()}">${t.status}</span></div>
    <div><b>Reference:</b> ${t.reference}</div>
    <div class="receipt-note">
      Please note that international transfers usually take 4-5 business days to reflect on the receiving account. Thank you for banking with us.
    </div>
    <button onclick="closeModal()">Close</button>
  `;
  document.getElementById('modalContent').innerHTML = html;
  document.getElementById('modalBg').classList.add('active');
}
window.showReceipt = showReceipt;

// --- Transfer Modal logic ---
function openTransferModal() {
  document.getElementById('transferModal').classList.add('active');
  document.getElementById('transferForm').reset();
  document.getElementById('transferLoading').style.display = 'none';
  document.getElementById('transferSuccess').style.display = 'none';
  document.getElementById('transferSendBtn').disabled = false;
}
function closeTransferModal() {
  document.getElementById('transferModal').classList.remove('active');
}
document.getElementById('transferForm').addEventListener('submit', function(e) {
  e.preventDefault();
  const name = document.getElementById('recipientName').value.trim();
  const bank = document.getElementById('recipientBank').value.trim();
  const accountNo = document.getElementById('recipientAccountNo').value.trim();
  const routing = document.getElementById('recipientRouting').value.trim();
  const amount = parseFloat(document.getElementById('transferAmount').value);
  const reference = document.getElementById('transferReference').value.trim();
  if (amount > currentUser.balance) {
    alert('Insufficient balance!');
    return;
  }
  document.getElementById('transferSendBtn').disabled = true;
  document.getElementById('transferLoading').style.display = 'block';
  setTimeout(() => {
    document.getElementById('transferLoading').style.display = 'none';
    document.getElementById('transferSuccess').style.display = 'block';
    // Update balance and add transaction
    let customers = getCustomers();
    let idx = customers.findIndex(c => c.username === currentUser.username);
    let date = new Date().toLocaleString();
    let ref = reference || 'TR' + Date.now();
    customers[idx].balance -= amount;
    let note = `Transfer to ${name}, ${bank}, Acc: ${accountNo}, Routing: ${routing}`;
    customers[idx].transactions.push({
      date, type: 'Transfer', amount, status: 'Success', reference: ref, note
    });
    saveCustomers(customers);
    addNotification(currentUser.username, `Transfer of $${amount.toFixed(2)} sent to ${name} (${bank}). Ref: ${ref}`, 'System');
    addAdminNotification(`Transfer: ${currentUser.name} sent $${amount.toFixed(2)} to ${name} (${bank}). Ref: ${ref}`);
    // Update UI
    currentUser = customers[idx];
    renderDashboardTransactions();
    renderNotifications();
    updateNotifDot();
    setTimeout(() => {
      closeTransferModal();
      showReceipt(ref);
    }, 1200);
  }, 2000);
});

// --- Loan logic ---
document.getElementById('loanForm').addEventListener('submit', function(e) {
  e.preventDefault();
  let amount = parseFloat(document.getElementById('loanAmount').value);
  let purpose = document.getElementById('loanPurpose').value.trim();
  let duration = parseInt(document.getElementById('loanDuration').value);
  let loan = {
    amount, purpose, duration, status: 'Pending', date: new Date().toLocaleString()
  };
  let customers = getCustomers();
  let idx = customers.findIndex(c => c.username === currentUser.username);
  customers[idx].loans = customers[idx].loans || [];
  customers[idx].loans.push(loan);
  saveCustomers(customers);
  addNotification(currentUser.username, `Your loan application for $${amount} is submitted.`, 'System');
  addAdminNotification(`Loan request: ${currentUser.name} applied for $${amount} (${purpose}, ${duration} mo).`);
  currentUser = customers[idx];
  renderLoanStatus();
  alert('Loan application submitted!');
  this.reset();
});
function renderLoanStatus() {
  let box = document.getElementById('loanStatusBox');
  let loans = currentUser.loans || [];
  if (!loans.length) {
    box.innerHTML = '<div style="color:#888;">No loan applications yet.</div>';
    return;
  }
  box.innerHTML = loans.map(l => `
    <div style="margin-bottom:10px;">
      <b>Amount:</b> $${l.amount} &nbsp; <b>Purpose:</b> ${l.purpose} &nbsp; <b>Duration:</b> ${l.duration} mo
      <br><b>Status:</b> <span class="loan-status-${l.status.toLowerCase()}">${l.status}</span>
      <br><span style="font-size:0.95em;color:#888;">Applied: ${l.date}</span>
    </div>
  `).join('');
}

// --- On page load ---
renderAdminTable();
</script>
</script>
 
  </main>
</body>
</html>
